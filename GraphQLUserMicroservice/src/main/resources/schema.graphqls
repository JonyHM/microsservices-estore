type User {
	id: ID!
	name: String
	addresses: [Address]
	email: String
	cpf: String
	contacts: [Contact]
}

type Address {
	id: ID!
	street: String
	number: String
	district: String
	complement: String
	city: String
	state: String
	country: String
	user: User
}

type Contact {
	id: ID!
	title: String
	type: String
	value: String
	user: User
}

type Query {
	getUsers: [User]
	getUserById(id: ID): User
	
	getContacts: [Contact]
	getContactById(id: ID): Contact
	getContactsByUserId(userId: ID): [Contact]
	
	getAddresses: [Address]
	getAddressById(id: ID): Address
	getAddressesByUserId(userId: ID): [Address]
}

input CreateUserInput {
	name: String
	email: String
	cpf: String
}

input UpdateUserInput {
	userId: ID!
	name: String
	email: String
	cpf: String
}

input CreateAdressInput {
	street: String
	number: String
	district: String
	complement: String
	city: String
	state: String
	country: String
	userId: ID!
}

input UpdateAdressInput {
	addressId: ID!
	street: String
	number: String
	district: String
	complement: String
	city: String
	state: String
	country: String
}

input CreateContactInput {
	title: String
	type: String
	value: String
	userId: ID!
}

input UpdateContactInput {
	contactId: ID!
	title: String
	type: String
	value: String
}

type Mutation {
	createUser(user: CreateUserInput!): User!
	updateUser(user: UpdateUserInput!): User!
	deleteUser(userId: ID!): String!
	
	createAddress(address: CreateAdressInput!): Address!
	updateAddress(address: UpdateAdressInput!): Address!
	deleteAddress(addressId: ID!): String!
	
	createContact(contact: CreateContactInput!): Contact!
	updateContact(contact: UpdateContactInput!): Contact!
	deleteContact(contactId: ID!): String!
}