type Customer {
	id: ID!
  	userId: ID!
	name: String
	cpf: String
	contacts: [Contact]
	addresses: [Address]
  	cards: [Card]
}

type Card {
  	id: ID!
	nickname: String
	holderName: String
	number: Int
	cvv: Int
	expirationDate: String
	holder: Customer!
}

type Address {
	id: ID!
	street: String
	number: Int
	district: String
	complement: String
	city: String
	country: String
	customer: Customer
}

type Contact {
	id: ID!
	title: String
	type: String
	value: String
	customer: Customer
}

type Order {
	id: ID!
	cartId: String
	userId: String
	description: String
	customer: Customer
}

type Query {
	getCustomers: [Customer]
	getCustomerById(id: ID): Customer
  	getCustomerByCPF(cpf: String): Customer
  	getCustomerByUserId(userId: ID): Customer
	
	getContacts: [Contact]
	getContactById(id: ID): Contact
	getContactsByCustomerId(customerId: ID): [Contact]
	
	getAddresses: [Address]
	getAddressById(id: ID): Address
	getAddressesByCustomerId(customerId: ID): [Address]

  	getCards: [Card]
	getCardById(id: ID): Card
	getCardsByCustomerId(customerId: ID): [Card]

	getOrders: [Order]
	getOrderById(id: ID): Order
	getOrdersByCustomerId(customerId: ID): [Order]
}

input CustomerInput {
  	userId: ID
	name: String
	cpf: String
}

input CardInput {
	nickname: String
 	holderName: String
  	number: Int
  	cvv: Int
  	expirationDate: String
	holderId: ID!
}

input AdressInput {
	street: String
	number: Int
	district: String
	complement: String
	city: String
	country: String
  	customerId: ID!
}

input ContactInput {
	title: String
	type: String
	value: String
  	customerId: ID!
}

input OrderInput {
	cartId: String!
	userId: String!
	description: String
}

type Mutation {
	createCustomer(customer: CustomerInput!): Customer!
  	createCard(card: CardInput!): Card!
	createAddress(address: AdressInput!): Address!
	createContact(contact: ContactInput!): Contact!
	createOrder(order: OrderInput!): Order!
}